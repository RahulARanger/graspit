name: 'server-build'

on:
  push:
    branches:
      - 'server-build'

permissions:
    contents: write

jobs:
    pre:
      name: check if build is required
      runs-on: 'ubuntu-latest'
      permissions: write-all
      outputs:
        exists : ${{ steps.checkTag.output.exists }} # str, "false" or "true

      steps:
        - uses: actions/checkout@v3

        - name: Release Prep
          id: current
          run: |
            bash ./.github/scripts/fetch-server-version.sh

        - name: Check if release already exists
          uses: mukunku/tag-exists-action@v1.4.0
          id: checkTag
          with:
            tag: ${{steps.current.outputs.VERSION}}

    build:
      name: Building Executable
      needs: pre
      if: ${{ needs.pre.outputs.exists == 'false' }}
      runs-on: ${{ matrix.os }}

      outputs:
        skipped: ${{ needs.pre.outputs.exists }} # 'false' or 'true', false means executed

      strategy:
        matrix:
          os: ['macos-latest', 'windows-latest', 'ubuntu-latest']

      steps:
        - uses: actions/checkout@v3
        - name: Set up Python 3.11
          uses: actions/setup-python@v3
          with:
            python-version: "3.11"

        - name: Set up venv
          run: |
            python -m venv venv

        - name: Activate venv if not Windows
          if: ${{ matrix.os != 'windows-latest' }}
          run: | 
            source ./venv/bin/activate

        - name: Activate venv if Windows
          if: ${{ matrix.os == 'windows-latest' }}
          run: ./venv/scripts/activate

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install poetry 
            poetry install

        - name: Regression Test
          run: pytest __test__/test_regression

        - name: Build Generation
          run: pyinstaller starter.spec

        - name: Testing the build
          run: pytest __test__/test_sanity

        - name: Upload Executable
          uses: actions/upload-artifact@v3
          with:
            name: ${{ matrix.os }}
            path: dist/*
            retention-days: 1

    release:
      name: Preparing for next step
      runs-on: 'ubuntu-latest'
      needs: build
      permissions: write-all

      if: ${{ needs.build.outputs.skipped == 'false' }}

      steps:
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@v3
          with:
            path: dist

        - name: Release Prep
          id: version
          run: |
            bash ./.github/scripts/fetch-server-version.sh

        - uses: softprops/action-gh-release@v1
          id: release
          with:
            files: dist/**/*
            body: ":rocket: Bump graspit-server version to `${{ steps.version.outputs.VERSION }}`"
            prerelease: true
            tag_name: ${{ steps.version.outputs.VERSION }}
            name: "Graspit - ${{ steps.version.outputs.VERSION }}"
            generate_release_notes: true

        - name: Post Release Post
          env:
            ASSETS: ${{ steps.release.outputs.assets }}
          run: bash ./.github/scripts/release-server-tag.sh

        - name: Request dashboard-build to use the latest release
          uses: peter-evans/create-pull-request@v5
          with:
            commit-message: "Requesting to use the new build for the server: ${{ steps.version.outputs.VERSION }}"
            delete-branch: true
            title: "Bump Server Build"
            labels: "Automated,Server-build"
            reviewers: "RahulARanger"
            body: ":rocket: Bumped graspit-server version to `${{ steps.version.outputs.VERSION }}`.<br/>
:magic_wand: Make sure to edit this [release](${{ steps.release.outputs.url }}) once done."
            base: "nodejs-reporters"
            assignees: "RahulARanger"
