name: 'releases'

on:
  # NOTE: yet to decided if manual trigger is required
  #  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "handshake-nodejs-reporters/**"
      - "handshake/**"
      - ".github/**"
      - "__test__/**"
      - "noxfile.py"
      - "poetry.toml"
      - "pyproject.toml"
      - "poetry.lock"
      - "**/release.yml"


permissions:
    contents: write

jobs:
  decide:
    runs-on: ubuntu-latest
    outputs:
      dashboard: ${{ steps.filter.outputs.dashboard }}
      py: ${{ steps.filter.outputs.py }}

    name: decides which job to run based on the file changes
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            dashboard:
              - 'handshake-nodejs-reporters/packages/handshake-dashboard/**'
              - '.github/scripts/fetch-dashboard-version.sh'
            py:
                - 'handshake/**'
                - '**/release.yml'
                - "poetry.toml"
                - "pyproject.toml"
                - "poetry.lock"
                - '.github/scripts/build-sqlite.sh'

  release:
    name: bundling the dashboard-build
    needs: decide
    runs-on: 'ubuntu-latest'
    permissions: write-all
    if: ${{ needs.decide.outputs.dashboard == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0

      - name: Installing node packages
        working-directory: ./handshake-nodejs-reporters/packages/handshake-dashboard
        run: npm install && npx playwright install --with-deps && npm i @swc/cli @swc/core wait-on concurrently http-server

      - name: Building Dashboard
        working-directory: ./handshake-nodejs-reporters/packages/handshake-dashboard
        run: npm run build

      - name: Zipping the dashboard export
        working-directory: dashboard
        run: tar -cjf ../dashboard.tar.bz2 *

      - name: fetch dashboard-version
        id: version
        run: bash .github/scripts/fetch-dashboard-version.sh

      - name: create pre-release
        uses: softprops/action-gh-release@v2
        id: release
        with:
          files: dashboard.tar.bz2
          body: ":rocket: Bump Handshake-server version to `${{ steps.version.outputs.VERSION }}`"
          prerelease: true
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: "Handshake v${{ steps.version.outputs.VERSION }}"
          generate_release_notes: true

      - name: build version file
        env:
          ASSETS: ${{ steps.release.outputs.assets }}
        run: node .github/scripts/sdv.cjs

      - name: commiting the changes
        uses: stefanzweifel/git-auto-commit-action@v5
        id: post-release
        with:
          ref: ${{ github.head_ref }}
          commit_message: Bump Handshake Dashboard Version
          file_pattern: '*.version'

  test-py:
    needs: decide
    name: check if the py-build for handshake is stable
    runs-on: 'ubuntu-latest'
    if: ${{ needs.decide.outputs.py == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.11
            3.12

      - name: Set up venv
        run: |
          python -m venv venv

      - name: Activate venv if not Windows
        if: ${{ matrix.os != 'windows-latest' }}
        run: | 
          source ./venv/bin/activate

      - name: Activate venv if Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: ./venv/scripts/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Publish handshakes to PYPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: poetry build && poetry publish
